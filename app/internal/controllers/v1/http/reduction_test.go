package http

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"net/http"
	"net/http/httptest"
	"strconv"
	"testing"
	"url-shorter/app/internal/adapters/db/redis"
	"url-shorter/app/internal/config"
	"url-shorter/app/internal/controllers/v1/dto"
	"url-shorter/app/internal/domain/service/reduction"
	r "url-shorter/app/pkg/client/redis"
	"url-shorter/app/pkg/shortener"
)

type testApp struct {
	handler *ReductionHandler
}

func newTestApp() *testApp {
	ctx := context.Background()
	cfg := new(config.Config)

	cfg.Redis.Database = "0"
	cfg.Redis.Host = "0.0.0.0"
	cfg.Redis.Port = "6379"

	iDb, _ := strconv.Atoi(cfg.Redis.Database)

	redisConfig := r.NewRedisConfig(cfg.Redis.Host, cfg.Redis.Port, iDb)
	client := r.NewClient(ctx, redisConfig)
	storage := redis.NewReductionStorage(cfg, client)
	service := reduction.NewReductionService(storage)
	handler := NewReductionHandler(service)

	return &testApp{handler: handler}
}

func setUpRouter() *gin.Engine {
	router := gin.Default()
	return router
}

func TestHandler_createShortUrl(t *testing.T) {
	tApp := newTestApp()

	router := setUpRouter()

	router.POST("/api/v1/createShortUrl/", tApp.handler.CreateShortUrl)

	tests := []dto.CreateShortUrlDTO{
		{
			LongUrl:    "http://test.com/verylongurlwithcustomtext",
			CustomText: "short-url",
		},
		{
			LongUrl:    "http://test.com/verylongurlwithautogeneratedcustomtext",
			CustomText: "",
		},
		{
			LongUrl: "http://test.com/verylongurlwithoutcustomtext",
		},
	}

	for _, test := range tests {
		jsonValue, _ := json.Marshal(test)

		req, _ := http.NewRequest(http.MethodPost, "/api/v1/createShortUrl/", bytes.NewBuffer(jsonValue))
		w := httptest.NewRecorder()
		router.ServeHTTP(w, req)

		assert.Equal(t, http.StatusCreated, w.Code)
	}
}

func TestHandler_getLongURL(t *testing.T) {
	tApp := newTestApp()

	router := setUpRouter()

	router.POST("/api/v1/getLongUrl/", tApp.handler.GetLongUrl)

	tests := []dto.GetLongUrlDTO{
		{
			HashedLink: shortener.GenerateShortLink("http://test.com/verylongurlwithoutcustomtext"),
		},
	}

	for _, test := range tests {
		jsonValue, _ := json.Marshal(test)

		req, _ := http.NewRequest(http.MethodPost, "/api/v1/getLongUrl/", bytes.NewBuffer(jsonValue))
		w := httptest.NewRecorder()
		router.ServeHTTP(w, req)

		assert.Equal(t, http.StatusOK, w.Code)
	}

	test := dto.GetLongUrlDTO{HashedLink: "short-url"}

	jsonValue, _ := json.Marshal(test)

	req, _ := http.NewRequest(http.MethodPost, "/api/v1/getLongUrl/", bytes.NewBuffer(jsonValue))
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)
}
